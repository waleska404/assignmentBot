{"version":3,"file":"deepMap.js","sourceRoot":"","sources":["../src/lib/deepMap.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,cAAc,EAAa,MAAM,OAAO,CAAC;AAC1E,OAAO,kBAAkB,MAAM,sBAAsB,CAAC;AAQtD,MAAM,OAAO,GAAG,CAAC,QAAmB,EAAE,SAAsB,EAAe,EAAE;IAC3E,OAAO,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,CACnC,CAAC,KAAgB,EAAE,KAAa,EAAE,WAAiC,EAAE,EAAE;QACrE,IAAI,cAAc,CAAC,KAAK,CAAC,IAAI,kBAAkB,CAAC,KAAK,CAAC,EAAE;YACtD,qDAAqD;YACrD,OAAO,SAAS,CACd,YAAY,CAAC,KAAK,kCACb,KAAK,CAAC,KAAK,KACd,QAAQ,EAAE,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,SAAS,CAAC,IAClD,CACH,CAAC;SACH;QACD,OAAO,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;IAC9C,CAAC,CACF,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,OAAO,CAAC","sourcesContent":["import { Children, cloneElement, isValidElement, ReactNode } from 'react';\nimport hasComplexChildren from './hasComplexChildren';\n\nexport type MapFunction = (\n  child: ReactNode,\n  index?: number,\n  children?: readonly ReactNode[],\n) => ReactNode;\n\nconst deepMap = (children: ReactNode, deepMapFn: MapFunction): ReactNode[] => {\n  return Children.toArray(children).map(\n    (child: ReactNode, index: number, mapChildren: readonly ReactNode[]) => {\n      if (isValidElement(child) && hasComplexChildren(child)) {\n        // Clone the child that has children and map them too\n        return deepMapFn(\n          cloneElement(child, {\n            ...child.props,\n            children: deepMap(child.props.children, deepMapFn),\n          }),\n        );\n      }\n      return deepMapFn(child, index, mapChildren);\n    },\n  );\n};\n\nexport default deepMap;\n"]}