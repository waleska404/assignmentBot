{"version":3,"file":"onlyText.js","sourceRoot":"","sources":["../src/lib/onlyText.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAwB,MAAM,OAAO,CAAC;AACvE,OAAO,WAAW,MAAM,eAAe,CAAC;AAExC,wDAAwD;AACxD,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,KAAuC,EAAU,EAAE;IAC/E,IAAI,OAAO,KAAK,KAAK,WAAW,IAAI,KAAK,KAAK,IAAI,IAAI,OAAO,KAAK,KAAK,SAAS,EAAE;QAChF,OAAO,EAAE,CAAC;KACX;IAED,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,IAAI,EAAE;QAClC,OAAO,EAAE,CAAC;KACX;IAED,OAAQ,KAAyB,CAAC,QAAQ,EAAE,CAAC;AAC/C,CAAC,CAAC;AAEF,MAAM,QAAQ,GAAG,CAAC,QAAmB,EAAU,EAAE;IAC/C,IAAI,CAAC,CAAC,QAAQ,YAAY,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;QAC7D,OAAO,aAAa,CAAC,QAAQ,CAAC,CAAC;KAChC;IAED,OAAO,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,IAAY,EAAE,KAAgB,EAAU,EAAE;QAClF,IAAI,OAAO,GAAG,EAAE,CAAC;QAEjB,IAAI,cAAc,CAAC,KAAK,CAAC,IAAI,WAAW,CAAC,KAAK,CAAC,EAAE;YAC/C,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;SAC1C;aAAM,IAAI,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;YACvD,OAAO,GAAG,EAAE,CAAC;SACd;aAAM;YACL,OAAO,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;SAChC;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC,CAAC;AAEF,eAAe,QAAQ,CAAC","sourcesContent":["import { Children, isValidElement, ReactNode, ReactText } from 'react';\nimport hasChildren from './hasChildren';\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const childToString = (child?: ReactText | boolean | {} | null): string => {\n  if (typeof child === 'undefined' || child === null || typeof child === 'boolean') {\n    return '';\n  }\n\n  if (JSON.stringify(child) === '{}') {\n    return '';\n  }\n\n  return (child as string | number).toString();\n};\n\nconst onlyText = (children: ReactNode): string => {\n  if (!(children instanceof Array) && !isValidElement(children)) {\n    return childToString(children);\n  }\n\n  return Children.toArray(children).reduce((text: string, child: ReactNode): string => {\n    let newText = '';\n\n    if (isValidElement(child) && hasChildren(child)) {\n      newText = onlyText(child.props.children);\n    } else if (isValidElement(child) && !hasChildren(child)) {\n      newText = '';\n    } else {\n      newText = childToString(child);\n    }\n\n    return text.concat(newText);\n  }, '');\n};\n\nexport default onlyText;\n"]}