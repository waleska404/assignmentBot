{"version":3,"file":"deepFilter.js","sourceRoot":"","sources":["../src/lib/deepFilter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,cAAc,EAAa,MAAM,OAAO,CAAC;AAC1E,OAAO,kBAAkB,MAAM,sBAAsB,CAAC;AAItD,MAAM,UAAU,GAAG,CAAC,QAAmB,EAAE,YAA4B,EAAe,EAAE;IACpF,OAAO,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC;SAC9B,MAAM,CAAC,YAAY,CAAC;SACpB,GAAG,CAAC,CAAC,KAAgB,EAAE,EAAE;QACxB,IAAI,cAAc,CAAC,KAAK,CAAC,IAAI,kBAAkB,CAAC,KAAK,CAAC,EAAE;YACtD,wDAAwD;YACxD,OAAO,YAAY,CAAC,KAAK,kCACpB,KAAK,CAAC,KAAK,KACd,QAAQ,EAAE,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,YAAY,CAAC,IACxD,CAAC;SACJ;QACD,OAAO,KAAK,CAAC;IACf,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,eAAe,UAAU,CAAC","sourcesContent":["import { Children, cloneElement, isValidElement, ReactNode } from 'react';\nimport hasComplexChildren from './hasComplexChildren';\n\nexport type FilterFunction = (child: ReactNode, index?: number, children?: ReactNode[]) => boolean;\n\nconst deepFilter = (children: ReactNode, deepFilterFn: FilterFunction): ReactNode[] => {\n  return Children.toArray(children)\n    .filter(deepFilterFn)\n    .map((child: ReactNode) => {\n      if (isValidElement(child) && hasComplexChildren(child)) {\n        // Clone the child that has children and filter them too\n        return cloneElement(child, {\n          ...child.props,\n          children: deepFilter(child.props.children, deepFilterFn),\n        });\n      }\n      return child;\n    });\n};\n\nexport default deepFilter;\n"]}