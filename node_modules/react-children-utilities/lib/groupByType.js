import { Children, isValidElement } from 'react';
const groupByType = (children, types = [], 
// eslint-disable-next-line @typescript-eslint/no-inferrable-types
rest = 'rest') => {
    return Children.toArray(children).reduce((groups, child) => {
        const newGroups = Object.assign({}, groups);
        let key = rest;
        if (isValidElement(child) && typeof child.type === 'string' && types.includes(child.type)) {
            key = child.type;
        }
        if (typeof newGroups[key] === 'undefined') {
            newGroups[key] = [];
        }
        newGroups[key] = [...newGroups[key], child];
        return newGroups;
    }, {});
};
export default groupByType;
//# sourceMappingURL=groupByType.js.map