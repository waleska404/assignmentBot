{"version":3,"file":"deepFind.js","sourceRoot":"","sources":["../src/lib/deepFind.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAa,MAAM,OAAO,CAAC;AAC5D,OAAO,kBAAkB,MAAM,sBAAsB,CAAC;AAQtD,MAAM,QAAQ,GAAG,CAAC,QAAmB,EAAE,UAAwB,EAAyB,EAAE;IACxF,gEAAgE;IAChE,IAAI,KAAK,CAAC;IAEV,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAC7B,CAAC,KAAgB,EAAE,KAAa,EAAE,YAAkC,EAAE,EAAE;QACtE,IAAI,UAAU,CAAC,KAAK,EAAE,KAAK,EAAE,YAAY,CAAC,EAAE;YAC1C,KAAK,GAAG,KAAK,CAAC;YACd,OAAO,IAAI,CAAC;SACb;QAED,IAAI,cAAc,CAAC,KAAK,CAAC,IAAI,kBAAkB,CAAC,KAAK,CAAC,EAAE;YACtD,0CAA0C;YAC1C,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;YACnD,OAAO,OAAO,KAAK,KAAK,WAAW,CAAC;SACrC;QAED,OAAO,KAAK,CAAC;IACf,CAAC,CACF,CAAC;IAEF,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,eAAe,QAAQ,CAAC","sourcesContent":["import { Children, isValidElement, ReactNode } from 'react';\nimport hasComplexChildren from './hasComplexChildren';\n\nexport type FindFunction = (\n  child: ReactNode,\n  index?: number,\n  children?: readonly ReactNode[],\n) => boolean;\n\nconst deepFind = (children: ReactNode, deepFindFn: FindFunction): ReactNode | undefined => {\n  // eslint-disable-next-line @typescript-eslint/init-declarations\n  let found;\n\n  Children.toArray(children).find(\n    (child: ReactNode, index: number, findChildren: readonly ReactNode[]) => {\n      if (deepFindFn(child, index, findChildren)) {\n        found = child;\n        return true;\n      }\n\n      if (isValidElement(child) && hasComplexChildren(child)) {\n        // Find inside the child that has children\n        found = deepFind(child.props.children, deepFindFn);\n        return typeof found !== 'undefined';\n      }\n\n      return false;\n    },\n  );\n\n  return found;\n};\n\nexport default deepFind;\n"]}