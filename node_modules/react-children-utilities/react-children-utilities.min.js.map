{"version":3,"file":"react-children-utilities.min.js","sources":["lib/hasChildren.js","lib/hasComplexChildren.js","lib/deepFilter.js","lib/deepFind.js","lib/deepForEach.js","lib/deepMap.js","lib/filter.js","lib/groupByType.js","lib/onlyText.js","react-children-utilities.js"],"sourcesContent":["import { isValidElement } from 'react';\nconst hasChildren = (element) => isValidElement(element) && Boolean(element.props.children);\nexport default hasChildren;\n//# sourceMappingURL=hasChildren.js.map","import { Children, isValidElement } from 'react';\nimport hasChildren from './hasChildren';\nconst hasComplexChildren = (element) => isValidElement(element) &&\n    hasChildren(element) &&\n    Children.toArray(element.props.children).reduce((response, child) => response || isValidElement(child), false);\nexport default hasComplexChildren;\n//# sourceMappingURL=hasComplexChildren.js.map","import { Children, cloneElement, isValidElement } from 'react';\nimport hasComplexChildren from './hasComplexChildren';\nconst deepFilter = (children, deepFilterFn) => {\n    return Children.toArray(children)\n        .filter(deepFilterFn)\n        .map((child) => {\n        if (isValidElement(child) && hasComplexChildren(child)) {\n            // Clone the child that has children and filter them too\n            return cloneElement(child, Object.assign(Object.assign({}, child.props), { children: deepFilter(child.props.children, deepFilterFn) }));\n        }\n        return child;\n    });\n};\nexport default deepFilter;\n//# sourceMappingURL=deepFilter.js.map","import { Children, isValidElement } from 'react';\nimport hasComplexChildren from './hasComplexChildren';\nconst deepFind = (children, deepFindFn) => {\n    // eslint-disable-next-line @typescript-eslint/init-declarations\n    let found;\n    Children.toArray(children).find((child, index, findChildren) => {\n        if (deepFindFn(child, index, findChildren)) {\n            found = child;\n            return true;\n        }\n        if (isValidElement(child) && hasComplexChildren(child)) {\n            // Find inside the child that has children\n            found = deepFind(child.props.children, deepFindFn);\n            return typeof found !== 'undefined';\n        }\n        return false;\n    });\n    return found;\n};\nexport default deepFind;\n//# sourceMappingURL=deepFind.js.map","import { Children, isValidElement } from 'react';\nimport hasComplexChildren from './hasComplexChildren';\nconst deepForEach = (children, deepForEachFn) => {\n    Children.forEach(children, (child, index) => {\n        if (isValidElement(child) && hasComplexChildren(child)) {\n            // Each inside the child that has children\n            deepForEach(child.props.children, deepForEachFn);\n        }\n        deepForEachFn(child, index);\n    });\n};\nexport default deepForEach;\n//# sourceMappingURL=deepForEach.js.map","import { Children, cloneElement, isValidElement } from 'react';\nimport hasComplexChildren from './hasComplexChildren';\nconst deepMap = (children, deepMapFn) => {\n    return Children.toArray(children).map((child, index, mapChildren) => {\n        if (isValidElement(child) && hasComplexChildren(child)) {\n            // Clone the child that has children and map them too\n            return deepMapFn(cloneElement(child, Object.assign(Object.assign({}, child.props), { children: deepMap(child.props.children, deepMapFn) })));\n        }\n        return deepMapFn(child, index, mapChildren);\n    });\n};\nexport default deepMap;\n//# sourceMappingURL=deepMap.js.map","import { Children } from 'react';\nconst filter = (children, filterFn) => {\n    return Children.toArray(children).filter(filterFn);\n};\nexport default filter;\n//# sourceMappingURL=filter.js.map","import { Children, isValidElement } from 'react';\nconst groupByType = (children, types = [], \n// eslint-disable-next-line @typescript-eslint/no-inferrable-types\nrest = 'rest') => {\n    return Children.toArray(children).reduce((groups, child) => {\n        const newGroups = Object.assign({}, groups);\n        let key = rest;\n        if (isValidElement(child) && typeof child.type === 'string' && types.includes(child.type)) {\n            key = child.type;\n        }\n        if (typeof newGroups[key] === 'undefined') {\n            newGroups[key] = [];\n        }\n        newGroups[key] = [...newGroups[key], child];\n        return newGroups;\n    }, {});\n};\nexport default groupByType;\n//# sourceMappingURL=groupByType.js.map","import { Children, isValidElement } from 'react';\nimport hasChildren from './hasChildren';\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const childToString = (child) => {\n    if (typeof child === 'undefined' || child === null || typeof child === 'boolean') {\n        return '';\n    }\n    if (JSON.stringify(child) === '{}') {\n        return '';\n    }\n    return child.toString();\n};\nconst onlyText = (children) => {\n    if (!(children instanceof Array) && !isValidElement(children)) {\n        return childToString(children);\n    }\n    return Children.toArray(children).reduce((text, child) => {\n        let newText = '';\n        if (isValidElement(child) && hasChildren(child)) {\n            newText = onlyText(child.props.children);\n        }\n        else if (isValidElement(child) && !hasChildren(child)) {\n            newText = '';\n        }\n        else {\n            newText = childToString(child);\n        }\n        return text.concat(newText);\n    }, '');\n};\nexport default onlyText;\n//# sourceMappingURL=onlyText.js.map","import { Children } from 'react';\nimport deepFilter from './lib/deepFilter';\nimport deepFind from './lib/deepFind';\nimport deepForEach from './lib/deepForEach';\nimport deepMap from './lib/deepMap';\nimport filter from './lib/filter';\nimport groupByType from './lib/groupByType';\nimport hasChildren from './lib/hasChildren';\nimport hasComplexChildren from './lib/hasComplexChildren';\nimport onlyText from './lib/onlyText';\nexport { deepFilter, deepFind, deepForEach, deepMap, filter, groupByType, hasChildren, hasComplexChildren, onlyText, };\nexport default Object.assign(Object.assign({}, Children), { deepFilter,\n    deepFind,\n    deepForEach,\n    deepMap,\n    filter,\n    groupByType,\n    hasChildren,\n    hasComplexChildren,\n    onlyText });\n//# sourceMappingURL=react-children-utilities.js.map"],"names":["hasChildren","element","isValidElement","Boolean","props","children","hasComplexChildren","Children","toArray","reduce","response","child","deepFilter","deepFilterFn","filter","map","cloneElement","Object","assign","deepFind","deepFindFn","found","find","index","findChildren","deepForEach","deepForEachFn","forEach","deepMap","deepMapFn","mapChildren","filterFn","groupByType","types","rest","groups","newGroups","key","type","includes","childToString","JSON","stringify","toString","onlyText","Array","text","newText","concat","o","l","p","i","O","h","j","s"],"mappings":"uEACK,MAACA,EAAeC,GAAYC,EAAeD,IAAYE,QAAQF,EAAQG,EAAMC,UCC5EC,EAAsBL,GAAYC,EAAeD,IACnDD,EAAYC,IACZM,EAASC,QAAQP,EAAQG,EAAMC,UAAUI,OAAO,CAACC,EAAUC,IAAUD,GAAYR,EAAeS,IAAQ,GCFtGC,EAAa,CAACP,EAAUQ,IACnBN,EAASC,QAAQH,GACnBS,OAAOD,GACPE,IAAKJ,GACFT,EAAeS,IAAUL,EAAmBK,GAErCK,EAAaL,EAAOM,OAAOC,OAAOD,OAAOC,OAAO,GAAIP,EAAMP,GAAQ,CAAEC,SAAUO,EAAWD,EAAMP,EAAMC,SAAUQ,MAEnHF,GCRTQ,EAAW,CAACd,EAAUe,KAExB,IAAIC,EAaJ,OAZAd,EAASC,QAAQH,GAAUiB,KAAK,CAACX,EAAOY,EAAOC,IACvCJ,EAAWT,EAAOY,EAAOC,IACzBH,EAAQV,GACD,MAEPT,EAAeS,KAAUL,EAAmBK,MAE5CU,EAAQF,EAASR,EAAMP,EAAMC,SAAUe,QACf,IAAVC,IAIfA,GCfLI,EAAc,CAACpB,EAAUqB,KAC3BnB,EAASoB,QAAQtB,EAAU,CAACM,EAAOY,KAC3BrB,EAAeS,IAAUL,EAAmBK,IAE5Cc,EAAYd,EAAMP,EAAMC,SAAUqB,GAEtCA,EAAcf,EAAOY,MCNvBK,EAAU,CAACvB,EAAUwB,IAChBtB,EAASC,QAAQH,GAAUU,IAAI,CAACJ,EAAOY,EAAOO,IAC7C5B,EAAeS,IAAUL,EAAmBK,GAErCkB,EAAUb,EAAaL,EAAOM,OAAOC,OAAOD,OAAOC,OAAO,GAAIP,EAAMP,GAAQ,CAAEC,SAAUuB,EAAQjB,EAAMP,EAAMC,SAAUwB,OAE1HA,EAAUlB,EAAOY,EAAOO,ICPjChB,EAAS,CAACT,EAAU0B,IACfxB,EAASC,QAAQH,GAAUS,OAAOiB,GCDvCC,EAAc,CAAC3B,EAAU4B,EAAQ,GAEvCC,EAAO,SACI3B,EAASC,QAAQH,GAAUI,OAAO,CAAC0B,EAAQxB,KAC9C,MAAMyB,EAAYnB,OAAOC,OAAO,GAAIiB,GACpC,IAAIE,EAAMH,EAQV,OAPIhC,EAAeS,IAAgC,iBAAfA,EAAM2B,MAAqBL,EAAMM,SAAS5B,EAAM2B,QAChFD,EAAM1B,EAAM2B,WAEc,IAAnBF,EAAUC,KACjBD,EAAUC,GAAO,IAErBD,EAAUC,GAAO,IAAID,EAAUC,GAAM1B,GAC9ByB,GACR,ICZMI,EAAiB7B,GACtB,MAAOA,GAA4D,kBAAVA,GAG/B,OAA1B8B,KAAKC,UAAU/B,GAFR,GAKJA,EAAMgC,WAEXC,EAAYvC,GACRA,aAAoBwC,OAAW3C,EAAeG,GAG7CE,EAASC,QAAQH,GAAUI,OAAO,CAACqC,EAAMnC,KAC5C,IAAIoC,EAAU,GAUd,OARIA,EADA7C,EAAeS,IAAUX,EAAYW,GAC3BiC,EAASjC,EAAMP,EAAMC,UAE1BH,EAAeS,KAAWX,EAAYW,GACjC,GAGA6B,EAAc7B,GAErBmC,EAAKE,OAAOD,IACpB,IAdQP,EAAcnC,GCH7B,MAAeY,OAAOC,OAAOD,OAAOC,OAAO,GAAIX,GAAW,CAAE0C,EAAArC,EACxDsC,EAAA/B,EACAgC,EAAA1B,EACA2B,EAAAxB,EACAd,OAAAA,EACAuC,EAAArB,EACAsB,EAAAtD,EACAuD,EAAAjD,EACAkD,EAAAZ"}