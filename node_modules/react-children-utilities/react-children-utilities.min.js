import{isValidElement as e,Children as t,cloneElement as r}from"react";const o=t=>e(t)&&Boolean(t.t.children),n=r=>e(r)&&o(r)&&t.toArray(r.t.children).reduce((t,r)=>t||e(r),!1),l=(o,c)=>t.toArray(o).filter(c).map(t=>e(t)&&n(t)?r(t,Object.assign(Object.assign({},t.t),{children:l(t.t.children,c)})):t),c=(r,o)=>{let l;return t.toArray(r).find((t,r,p)=>o(t,r,p)?(l=t,!0):!(!e(t)||!n(t))&&(l=c(t.t.children,o),void 0!==l)),l},p=(r,o)=>{t.forEach(r,(t,r)=>{e(t)&&n(t)&&p(t.t.children,o),o(t,r)})},d=(o,l)=>t.toArray(o).map((t,o,c)=>e(t)&&n(t)?l(r(t,Object.assign(Object.assign({},t.t),{children:d(t.t.children,l)}))):l(t,o,c)),i=(e,r)=>t.toArray(e).filter(r),a=(r,o=[],n="rest")=>t.toArray(r).reduce((t,r)=>{const l=Object.assign({},t);let c=n;return e(r)&&"string"==typeof r.type&&o.includes(r.type)&&(c=r.type),void 0===l[c]&&(l[c]=[]),l[c]=[...l[c],r],l},{}),b=e=>null==e||"boolean"==typeof e||"{}"===JSON.stringify(e)?"":e.toString(),O=r=>r instanceof Array||e(r)?t.toArray(r).reduce((t,r)=>{let n="";return n=e(r)&&o(r)?O(r.t.children):e(r)&&!o(r)?"":b(r),t.concat(n)},""):b(r);var h=Object.assign(Object.assign({},t),{o:l,l:c,p:p,i:d,filter:i,O:a,h:o,j:n,s:O});export default h;export{l as deepFilter,c as deepFind,p as deepForEach,d as deepMap,i as filter,a as groupByType,o as hasChildren,n as hasComplexChildren,O as onlyText};
//# sourceMappingURL=react-children-utilities.min.js.map
