/// <reference types="react" />
import deepFilter from './lib/deepFilter';
import deepFind from './lib/deepFind';
import deepForEach from './lib/deepForEach';
import deepMap from './lib/deepMap';
import filter from './lib/filter';
import groupByType from './lib/groupByType';
import hasChildren from './lib/hasChildren';
import hasComplexChildren from './lib/hasComplexChildren';
import onlyText from './lib/onlyText';
export { deepFilter, deepFind, deepForEach, deepMap, filter, groupByType, hasChildren, hasComplexChildren, onlyText, };
declare const _default: {
    deepFilter: (children: import("react").ReactNode, deepFilterFn: import("./lib/deepFilter").FilterFunction) => import("react").ReactNode[];
    deepFind: (children: import("react").ReactNode, deepFindFn: import("./lib/deepFind").FindFunction) => import("react").ReactNode;
    deepForEach: (children: import("react").ReactNode, deepForEachFn: import("./lib/deepForEach").ForEachFunction) => void;
    deepMap: (children: import("react").ReactNode, deepMapFn: import("./lib/deepMap").MapFunction) => import("react").ReactNode[];
    filter: (children: import("react").ReactNode, filterFn: (child: import("react").ReactNode, index?: number | undefined, children?: import("react").ReactNode[] | undefined) => boolean) => import("react").ReactNode[];
    groupByType: (children: import("react").ReactNode, types?: readonly import("react").ReactNode[], rest?: string) => import("./lib/groupByType").GroupedChildren;
    hasChildren: (element: import("react").ReactNode) => element is import("react").ReactElement<{
        children: import("react").ReactNode[];
    }, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)> | null) | (new (props: any) => import("react").Component<any, any, any>)>;
    hasComplexChildren: (element: import("react").ReactNode) => element is import("react").ReactElement<{
        children: import("react").ReactNode[];
    }, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)> | null) | (new (props: any) => import("react").Component<any, any, any>)>;
    onlyText: (children: import("react").ReactNode) => string;
    map<T, C>(children: C | C[], fn: (child: C, index: number) => T): C extends null | undefined ? C : Exclude<T, boolean | null | undefined>[];
    forEach<C_1>(children: C_1 | C_1[], fn: (child: C_1, index: number) => void): void;
    count(children: any): number;
    only<C_2>(children: C_2): C_2 extends any[] ? never : C_2;
    toArray(children: string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal | import("react").ReactNode[] | null | undefined): (string | number | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)> | null) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal)[];
};
export default _default;
//# sourceMappingURL=react-children-utilities.d.ts.map