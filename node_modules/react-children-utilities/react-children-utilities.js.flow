/**
 * Flowtype definitions for react-children-utilities
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

import deepFilter from "./lib/deepFilter";
import deepFind from "./lib/deepFind";
import deepForEach from "./lib/deepForEach";
import deepMap from "./lib/deepMap";
import filter from "./lib/filter";
import groupByType from "./lib/groupByType";
import hasChildren from "./lib/hasChildren";
import hasComplexChildren from "./lib/hasComplexChildren";
import onlyText from "./lib/onlyText";
declare export {
  deepFilter,
  deepFind,
  deepForEach,
  deepMap,
  filter,
  groupByType,
  hasChildren,
  hasComplexChildren,
  onlyText,
};
declare var _default: {
  deepFilter: (
    children: $PropertyType<$Exports<"react">, "ReactNode">,
    deepFilterFn: $PropertyType<$Exports<"./lib/deepFilter">, "FilterFunction">
  ) => $PropertyType<$Exports<"react">, "ReactNode">[],
  deepFind: (
    children: $PropertyType<$Exports<"react">, "ReactNode">,
    deepFindFn: $PropertyType<$Exports<"./lib/deepFind">, "FindFunction">
  ) => $PropertyType<$Exports<"react">, "ReactNode">,
  deepForEach: (
    children: $PropertyType<$Exports<"react">, "ReactNode">,
    deepForEachFn: $PropertyType<
      $Exports<"./lib/deepForEach">,
      "ForEachFunction"
    >
  ) => void,
  deepMap: (
    children: $PropertyType<$Exports<"react">, "ReactNode">,
    deepMapFn: $PropertyType<$Exports<"./lib/deepMap">, "MapFunction">
  ) => $PropertyType<$Exports<"react">, "ReactNode">[],
  filter: (
    children: $PropertyType<$Exports<"react">, "ReactNode">,
    filterFn: (
      child: $PropertyType<$Exports<"react">, "ReactNode">,
      index?: number | void,
      children?: $PropertyType<$Exports<"react">, "ReactNode">[] | void
    ) => boolean
  ) => $PropertyType<$Exports<"react">, "ReactNode">[],
  groupByType: (
    children: $PropertyType<$Exports<"react">, "ReactNode">,
    types?: $ReadOnlyArray<$PropertyType<$Exports<"react">, "ReactNode">>,
    rest?: string
  ) => $PropertyType<$Exports<"./lib/groupByType">, "GroupedChildren">,
  hasChildren: (
    element: $PropertyType<$Exports<"react">, "ReactNode">
  ) => boolean,
  hasComplexChildren: (
    element: $PropertyType<$Exports<"react">, "ReactNode">
  ) => boolean,
  onlyText: (children: $PropertyType<$Exports<"react">, "ReactNode">) => string,
  map<T, C>(
    children: C | C[],
    fn: (child: C, index: number) => T
  ): /* Flow doesn't support conditional types, use `$Call` utility type */ any,
  forEach<C_1>(
    children: C_1 | C_1[],
    fn: (child: C_1, index: number) => void
  ): void,
  count(children: any): number,
  only<C_2>(
    children: C_2
  ): /* Flow doesn't support conditional types, use `$Call` utility type */ any,
  toArray(
    children:
      | string
      | number
      | boolean
      | { ... }
      | $PropertyType<$Exports<"react">, "ReactElement">
      | $PropertyType<$Exports<"react">, "ReactNodeArray">
      | $PropertyType<$Exports<"react">, "ReactPortal">
      | $PropertyType<$Exports<"react">, "ReactNode">[]
      | null
      | void
  ): (
    | string
    | number
    | { ... }
    | $PropertyType<$Exports<"react">, "ReactElement">
    | $PropertyType<$Exports<"react">, "ReactNodeArray">
    | $PropertyType<$Exports<"react">, "ReactPortal">
  )[],
  ...
};
declare export default typeof _default;
